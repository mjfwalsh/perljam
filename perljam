#!/usr/bin/perl -w

#	perljam - A port of pdfjam by David Firth written in Perl.
#	Copyright (C) 2020  Michael J. Walsh

#	This programme is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public Licence as published by
#	the Free Software Foundation, either version 3 of the Licence, or any
#	later version.

#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public Licence for more details.

#	You can find a copy of the GNU General Public Licence at
#	<https://www.gnu.org/licenses/>. And if that doesn't work
#	try Googling it!

use 5.012;

# core modules
use strict;
use File::Copy;
use Cwd qw{getcwd abs_path};
use IPC::Open3;
use File::Temp ();
use File::Glob ':bsd_glob';

# other modules
use File::Which ();

# Perl on Win32 doesn't support open LIST, so I use open3 to make filename safe
# operations. This can create problems for line endings.

# While Windows traditionally uses CRLF endings, some of the applications this script
# uses output unix LF endings instead.

# To make the script version and future proof I set $/ to LF and deal with CRs on the
# go.

$/ = "\x0A";

# Load Win32 on windows systems
BEGIN { require Win32 if $^O eq 'MSWin32'; }

# setup some control variables
my $version = '0.0';
my %pdf = ();
my @input_files;

# default values
my %opt = (
batch => 0,
crop => 0,
tidy => 1,
keepinfo => 0,
checkfiles => 0,
suffix => 'perljam',
preamble => '',
out => getcwd(), # output to current working directory by default
paper => 'a4paper',
verbose => 0,
landscape => 0,
twoside => 0,
);

# We don't need to specify the .exe extension on Windows.
# List alternative possible names for Ghostscript
my %exe_name = ();
if($^O =~ /mswin32/i || $^O =~ /cygwin/i) {
	$exe_name{ghostscript} = ['gswin32c', 'gswin64c', 'mgs', 'gs'];
} else {
	$exe_name{ghostscript} = ['gs', 'gsc'];
}

$exe_name{pdflatex} = ['pdflatex'];
$exe_name{pdfinfo} = ['pdfinfo'];
$exe_name{kpsewhich} = ['kpsewhich'];
$exe_name{file} = ['file'];

############################################################
### Process command line options and configuration files ###
############################################################

print "Processing command args..." if $opt{verbose};

my $param_guide = parse_param_index(
qw{help|h! version|v! out|outfile|o},

# programs
qw{ghostscript|gs pdflatex pdfinfo kpsewhich file},

# pdf info
qw{author|pdfauthor keywords|pdfkeywords subject|pdfsubject title|pdftitle},

# pairs
qw{quiet|q!verbose verbose! portrait!landscape landscape! oneside!twoside twoside!},

# package options
qw{final! draft! enable-survey!},

# paper
qw{paper|papersize a4paper=v:paper a5paper=v:paper b5paper=v:paper
letterpaper|letter=v:paper executivepaper|executive=v:paper legalpaper|legal=v:paper
a0paper=v:paper a1paper=v:paper a2paper=v:paper a3paper=v:paper a6paper=v:paper
b0paper=v:paper b1paper=v:paper b2paper=v:paper b3paper=v:paper b4paper=v:paper
b6paper=v:paper},

# misc
qw{batch! checkfiles! keepinfo! tidy! vanilla! crop!
configpath preamble. suffix pagecolor configfile margin},
);

my $args = process_args_from_cmd_line($param_guide);

if($args->{help}) {
	print_help();
	exit 0;
}

if($args->{version}) {
	print "\n" if $opt{verbose};
	print "Version: $version\n";
	exit 0;
}

# check vanilla
if(!$args->{vanilla} && defined $ENV{PERLJAMCONFIGFILE}) {
	my @configfiles;

	if($^O eq 'MSWin32') {
		@configfiles = split(/;/, $ENV{PERLJAMCONFIGFILE});
		foreach (@configfiles) {
			s!^~(/|\\)!$ENV{HOME}$1!g;
		}
	} else {
		@configfiles = split(/:/, $ENV{PERLJAMCONFIGFILE});
		foreach (@configfiles) {
			s!^~/!$ENV{HOME}/!g;
		}
	}

	@configfiles = grep { -f } @configfiles;

	if($#configfiles > -1) {
		my $file_args = process_args_from_file($param_guide, @configfiles);

		# now merge hashes: cmd_args wallop file_args
		my %tmp_args = (%$file_args, %$args);
		$args = \%tmp_args;
	}
}

#Â paper sizes
if(defined $args->{paper}) {
	if($args->{paper} =~ m/^([a-zA-Z][0-9]|letter|executive|legal)$/) {
		# avoid having to write paper after known paper types
		$args->{paper} .= 'paper';
	} else {
		# Add curly braces and a comma if necessary
		$args->{paper} =~ s/^([0-9\.]+[a-z]*)[ ,]([0-9\.]+[a-z]*)$/\{$1,$2\}/;
	}
}

# split into two groups
while(my($key, $value) = each %$args) {
	if(!defined $value) { $value = ''; }

	if(defined $param_guide->{$key}) {
		$opt{$key} = $value;
	} else {
		$key =~ s/2$/\*/;
		$pdf{$key} = $value;
	}
}

print "done\n" if $opt{verbose};

#########################################
### Process input files and selectors ###
#########################################

print "Processing input files..." if $opt{verbose};

# On windows we need to expand filenames ourselves
if($^O eq 'MSWin32') {
	my @new_argv = ();
	foreach my $arg (@ARGV) {
		if($arg =~ m/\*/ && !-f $arg) {
			push @new_argv, glob $arg;
		} else {
			push @new_argv, $arg;
		}
	}
	@ARGV = @new_argv;
}

while(my $arg = shift @ARGV) {
	if(-f $arg || -l $arg) {
		# get absolute path
		$arg = safe_abs_path($arg);
	} elsif($arg eq 'stdin' || $arg eq '-') {
		# nothing
	} else {
		die "\n$arg does not exist\n";
	}

	my $file = {source => $arg};

	if($#ARGV > -1 && $ARGV[0] =~ m/^[,0-9\{\}\-last]+$/ && !-e $ARGV[0]) {
		$file->{pages} = shift @ARGV;
	}

	push @input_files, $file;
}

if($#input_files < 0) {
	print_help();
	exit 1;
}

if(!$opt{batch} && $#input_files > 0 && $opt{keepinfo}) {
	die "\nWe can't keep info for more than one pdf file when not in batch mode\n";
}

if($opt{batch} && $#input_files == 0) {
	# Not much point in batch mode with only one input file
	$opt{batch} = 0;
}

print "done\n" if $opt{verbose};

#########################################
### Check output file/location        ###
#########################################

print "Processing files and selectors..." if $opt{verbose};

$opt{out} = safe_abs_path($opt{out});
if(-d $opt{out}) {
	die "\nCannot write to output directory: $opt{out}\n" if !-w $opt{out};
} elsif(-e $opt{out}) {
	die "\nOutput file already exists\n";
} elsif($opt{batch} || $opt{out} =~ m|/$|) {
	mkdir $opt{out} || die "Failed to create output directory: $opt{out}\n";
} elsif($opt{out} =~ m|^(.*/)([^/]+)$| && -d $1) {
	die "\nCannot write to output location: $1\n" if !-w $1;
} else {
	die "\nFailed to understand --out|-o\n";
}

print "done\n" if $opt{verbose};

############################################################################
### Get full paths for executables or check that they are in the path    ###
### Die if we don't have pdflatex and kpsewhich as we need these to work ###
############################################################################

print "Checking executables..." if $opt{verbose};

foreach my $exec (qw{ghostscript pdflatex pdfinfo kpsewhich file}) {
	if(defined $opt{$exec}) {
		if(-f $opt{$exec}) {
			$opt{$exec} = safe_abs_path($opt{$exec});
		} else {
			$opt{$exec} = check_path($opt{$exec});
		}
	} else {
		foreach my $e (@{ $exe_name{$exec} }) {
			if(-f $e) {
				$opt{$exec} = safe_abs_path($e);
				last;
			} else {
				$opt{$exec} = check_path($e);
				last if $opt{$exec};
			}
		}
	}
}

die "\nFailed to find pdflatex in path!\n" unless $opt{pdflatex};
die "\nFailed to find kpsewhich in path!\n" unless $opt{kpsewhich};

print "done\n" if $opt{verbose};

#######################################################
### Check we have required TeX packages and provide ###
### useful warnings for optionally needed packages  ###
#######################################################

print "Checking TeX packages..." if $opt{verbose};

# now have a look around for some TeX packages
my %texpackages = kpsewhich('pdfpages.sty', 'eso-pic.sty', 'everyshi.sty', 'hyperref.sty', 'geometry.sty', 'url.sty');

# we need these three to function
die "\nCan't find required TeX package pdfpages!\n" unless $texpackages{'pdfpages.sty'};
die "\nCan't find required TeX package eso-pic!\n" unless $texpackages{'eso-pic.sty'};
die "\nCan't find required TeX package everyshi!\n" unless $texpackages{'everyshi.sty'};

# print some helpful error messages if prerequisites are missing
my @prerequisites;

# keepinfo
if($opt{keepinfo} && !$opt{pdfinfo}) {
	push @prerequisites, "Cannot keep pdf info without pdfinfo!";
}

# hyperref
if($opt{keepinfo} || defined $opt{title} || defined $opt{author} || defined $opt{subject} || defined $opt{keywords}) {
	if(!$texpackages{'hyperref.sty'}) {
		push @prerequisites, "Cannot set pdf properties or keepinfo without the TeX hyperref package!";
	}
	if(!$texpackages{'url.sty'}) {
		# Not sure why this is????
		push @prerequisites, "Cannot set pdf properties or keepinfo without the TeX url package!";
	}
} elsif(!$opt{keepinfo}) {
	# if we're not --keepinfo and haven't set any pdf properties disable hyperref
	$texpackages{'hyperref.sty'} = 0;
}

# crop
if($opt{crop} && !$opt{ghostscript}) {
	push @prerequisites, "Cannot crop without ghostscript!";
}

# checkfiles
if($opt{checkfiles} && !$opt{file}) {
	push @prerequisites, "Cannot checkfiles without file command!";
}

# paper
if(!$texpackages{'geometry.sty'} && $opt{paper} !~ /^(a4|a5|b5|letter|executive|legal)paper$/) {
	# need geometry package
	push @prerequisites, "We need the TeX geometry package for the paper size $opt{paper}!";
}


if($#prerequisites > -1) {
	print "\n";
	push @prerequisites, "This could be a PATH issue.";
	print join "\n", @prerequisites;
	print "\n";
	exit 1;
}

print "done\n" if $opt{verbose};

#######################
### Process margins ###
#######################

my @margins;
if($opt{margin}) {
	@margins = split(/ +/, $opt{margin});

	unless($#margins == 0 || $#margins == 1 || $#margins == 3) {
		die "--margin must have 1, 2 or 4 measurements\n";
	}

	if($opt{crop}) {
		# Ghostscript uses post script points (1/72 of an inch) while tex uses US points (1/72.27 of an inch)
		my %units = (mm => 2.83464566929134, pc => 11.9551681195517,
			cm => 28.3464566929134, in => 72, pt => 0.99626400996264, bp => 1);
		$units{''} = $units{'pt'};

		foreach my $margin (@margins) {
			if($margin =~ m/^(-?[0-9\.]+)(mm|pc|cm|in|pt|bp|)$/) {
				my $bps = $1 * $units{$2};
				if($bps < 0) {
					$margin = int($bps - 0.5);
				} else {
					$margin = int($bps + 0.5);
				}
			} else {
				die "Malformed --margin param\n";
			}
		}
	} else {
		foreach my $margin (@margins) {
			if($margin =~ m/^(-?[0-9\.]+)(mm|pc|cm|in|pt|bp|)$/) {
				my $unit = $2 eq '' ? 'pt' : $2;
				$margin = ($1 * -1) . $unit;
			} else {
				die "Malformed --margin param\n";
			}
		}
	}

	if($#margins == 0) {
		@margins = ($margins[0], $margins[0], $margins[0], $margins[0]);
	} elsif($#margins == 1) {
		@margins = ($margins[0], $margins[1], $margins[0], $margins[1]);
	}

	if(!$opt{crop}) {
		$pdf{trim} = join ' ', @margins;
	}
} else {
	@margins = (0, 0, 0, 0);
}

###############################################################
### Create a temporary directory for processing TeX files   ###
###############################################################

my $tmpdir;
if(defined $opt{tempfiledir}) {
	$opt{tempfiledir} = safe_abs_path($opt{tempfiledir});
	$tmpdir = File::Temp->newdir( 'perljam-XXXXX', DIR => $opt{tempfiledir}, CLEANUP => $opt{tidy});
} else {
	$tmpdir = File::Temp->newdir( 'perljam-XXXXX', TMPDIR => 1, CLEANUP => $opt{tidy});
}

if($^O eq 'MSWin32') {
	$tmpdir =~ s|\\|/|g;
}

if(!$opt{tidy} || $opt{verbose}) {
	print "Temporary directory for this job is $tmpdir\n";
}

###########################################################################
### Process pdf files, determine bounding box for cropping if desired   ###
###########################################################################

my $counter = 1;
my %output_filenames = ();
for my $file (@input_files) {
	if(!defined $file->{pages}) {
		$file->{pages} = '-';
	}

	if($file->{source} eq 'stdin') {
		$file->{texname} = "input.pdf";
		my $temp_file = "$tmpdir/input.pdf";

		open(my $REDIR, ">$temp_file") || die "Failed to create temp file: $temp_file\n";
		binmode STDIN;
		binmode $REDIR;
		print $REDIR <STDIN>;
		close $REDIR;
	} elsif($^O eq 'MSWin32') {
		# use special windows short names with forward slashes to avoid complicated
		# filename escaping on windows systems
		# $^O eq 'MSWin32' on 64 bit systems

		my $f = Win32::GetShortPathName($file->{source});
		$f =~ s|\\|/|g;

		$file->{texname} = '\detokenize{' . $f . '}';
		if($opt{batch}) {
			$file->{tmpdir} = $tmpdir . "/file$counter";

			# create tmpdir
			mkdir $file->{tmpdir} || die "Failed to create temporary directory: $file->{tmpdir}\n";
		}
	} else {
		# create temporary symbolic link to avoid complicated
		# filename escaping on unix/linux/mac systems
		my $link_file;
		if($opt{batch}) {
			$link_file = $tmpdir . "/file$counter/input.pdf";
			$file->{tmpdir} = $tmpdir . "/file$counter";
			$file->{texname} = 'input.pdf';

			# create tmpdir now before link
			mkdir $file->{tmpdir} || die "Failed to create temporary directory: $file->{tmpdir}\n";
		} else {
			$link_file = $tmpdir . "/input$counter.pdf";
			$file->{texname} = "input$counter.pdf";
		}

		symlink ($file->{source}, $link_file) || die "Failed to create link file: $link_file\n";
	}
	$counter++;

	if($opt{keepinfo}) {
		my %pdfinfo;
		open3(0, my $PDFINFO, 0, $opt{pdfinfo}, $file->{source});
		while(my $line = <$PDFINFO>) {
			$line =~ s/[\x0D\x0A]+$//; # chomp
			next unless $line =~ m/^([^:]*): *(.+)$/;
			my ($k, $v) = ($1, $2);
			$k = lc $k;
			$v =~ s/^\s*(.*?)\s*$/$1/g;
			$pdfinfo{$k} = $v;
		}
		close $PDFINFO;

		# Avoid errors due to undefined fields
		foreach my $k ('title', 'author', 'subject', 'keywords', 'pages', 'page size') {
			if(!defined $pdfinfo{$k}) {
				$pdfinfo{$k} = '';
			}
		}

		# Get page count
		if($pdfinfo{'pages'} =~ /^[0-9]+$/) {
			$file->{pagecount} = $pdfinfo{'pages'};
		} else {
			die "Pdfinfo failed!\n";
		}

		# Sometime keepinfo runs but fails to extract any actual info
		if($pdfinfo{title} eq '' && $pdfinfo{author} eq '' && $pdfinfo{subject} eq '' && $pdfinfo{keywords} eq '') {
			print "Pdfinfo failed to extract pdf info from $file->{source}! Might be an old version.\n";
		}

		if($pdfinfo{'page size'} =~ /^([0-9\.]+) x ([0-9\.]+) pts/) {
			$file->{width} = $1;
			$file->{height} = $2;
		}

		foreach my $x (qw{title author subject keywords}) {
			$file->{$x} = $pdfinfo{$x};
		}
	}

	if($opt{crop}) {
		$file->{viewport} = do_crop($file);
	}
}

####################
### Generate TeX ###
####################

my $tex_file_content = "\\batchmode\n";

my @document_options = ($opt{paper});
push @document_options, 'landscape' if $opt{landscape};
push @document_options, 'twoside' if $opt{twoside};
$tex_file_content .= "\\documentclass[" . join(',', @document_options) . "]{article}\n";

if($opt{pagecolor}) {
	$tex_file_content .= '\\usepackage{color} \\definecolor{bgclr}{RGB}{';
	$tex_file_content .= $opt{pagecolor};
	$tex_file_content .=  '} \\pagecolor{bgclr}' . "\n";
}

if($texpackages{'geometry.sty'}) {
	$tex_file_content .= "\\usepackage[$opt{paper}]{geometry}\n";
}

$tex_file_content .= "\\usepackage[utf8]{inputenc}\n";

if($texpackages{'hyperref.sty'}) {
	$tex_file_content .= "\\usepackage{hyperref}\n";

	foreach my $p (qw|title author subject keywords|) {
		if(defined $opt{$p}) {
			$tex_file_content .= '\\hypersetup{pdf' . $p . '={' . $opt{$p} . "}}\n";
		}
	}
}

# package options
my $tex_file_content2 = "\\usepackage";
my @package_options = grep { $opt{$_} } 'final', 'draft', 'enable-survey';
if($#package_options > -1) {
	$tex_file_content2 .= '[' . (join ',', @package_options) . ']';
}
$tex_file_content2 .= "{pdfpages}\n";

# print preamble if we have any
$tex_file_content2 .= $opt{preamble} . "\n";

# don't use \includepdfset as not all options can be included that way
my @global_options = ();
while(my($k, $v) = each %pdf) {
	if(defined $v && length $v > 0) {
		push(@global_options, $k . '={' . $v . '}');
	}
}

$tex_file_content2 .= "\\begin{document}\n";

my $start_cwd = getcwd(); # save current directory
if($opt{batch}) {
	print "Batch mode..\n" if $opt{verbose};
	foreach my $file (@input_files) {
		chdir $file->{tmpdir};

		open my $TEMPLATE, '>a.tex' || die "Failed to create tex file: " .  getcwd() . "/a.tex\n";
		print $TEMPLATE $tex_file_content;

		if($texpackages{'hyperref.sty'}) {
			print $TEMPLATE compile_pdf_info(\%opt, $file);
		}

		print $TEMPLATE $tex_file_content2;
		print $TEMPLATE includepdf($file, 'pages', 'viewport');
		print $TEMPLATE "\\end{document}\n";
		close $TEMPLATE;

		callpdflatex(); # works on current directory

		my $pdf_name = get_pdf_basename($file->{source});
		my $o = get_unique_filename("$opt{out}/$pdf_name", "$opt{suffix}.pdf");

		move_output($o);
	}
} else {
	chdir $tmpdir;

	open my $TEMPLATE, '>a.tex' || die "Failed to create tex file: " .  getcwd() . "/a.tex\n";
	print $TEMPLATE $tex_file_content;

	if($texpackages{'hyperref.sty'}) {
		print $TEMPLATE compile_pdf_info(\%opt, $input_files[0]);
	}

	print $TEMPLATE $tex_file_content2;
	foreach my $file (@input_files) {
		print $TEMPLATE  includepdf($file, 'pages', 'viewport');
	}
	print $TEMPLATE "\\end{document}\n";
	close $TEMPLATE;

	callpdflatex(); # works on current directory

	my $pdf_name;
	my $o;
	if(-d $opt{out}) {
		if($#input_files == 0) {
			$pdf_name = get_pdf_basename($input_files[0]{source});
		} else {
			$pdf_name = 'output';
		}
		$o = get_unique_filename("$opt{out}/$pdf_name", "$opt{suffix}.pdf");
	} else {
		$o = $opt{out};
	}

	move_output($o);
}
chdir $start_cwd;

exit 0;

#########################
###    Subroutines    ###
#########################

# runs kpsewhich commmand, return true/false list of installed Tex packages
sub kpsewhich {
	my %texpackages;
	foreach my $k (@_) {
		$texpackages{$k} = 0;
	}

	my $CMD;
	open3(0, $CMD, $CMD,  $opt{kpsewhich}, keys %texpackages);
	while(my $file = <$CMD>) {
		$file =~ s/[\x0D\x0A]+$//; # chomp
		$file =~ s|^.*/||;
		if(exists $texpackages{$file}) {
			$texpackages{$file} = 1;
		}
	}
	close $CMD;

	return %texpackages;
}

# Documentation
sub print_help {
	print <<"MANPAGE";
Usage: perljam [OPTIONS] [--] [FILE [SEL]] [FILE [SEL]]...

perljam is a front end to the pdfpages LaTeX package. Its based on perljam
and mostly takes the same command line options.

where

  FILE     Any pdf, jpeg and png file. Set the filename to - or stdin to read from
           standard input which is also the default option.

  SEL      Optional pages selection for the preceding document.
  -        All he pages in a document (default)
  4-6      A range of pages
  5,7,3    A selection
  {}       Add a blank page
  last     The last page
  5-       Same as 5-last

  --       End options and beginning of files and selectors

  OPTIONS are pdfpages specifications in the form --KEY VALUE (see
   below), or

     --help  (or -h, or -u)
                  Output this help text.
     --version (or -V)
                  Output the version number of perljam.
     --quiet  (or -q)
                  Suppress verbose commentary on progress.
     --batch
                  Run perljam sequentially on each input file in turn, and
                  produce a separate output file for each input, rather
                  than the default behaviour (which concatonates multiple
                  input files into a single output file).
     --crop
                  Use Ghostscript to crop whitespace from pdfs before processing.
                  You may wish to use this in conjunction with --margins to leave
                  some whitespace when nuping.
     --margins <all>
     --margins "<side margin> <top/bottom margin>"
     --margins "<left> <top> <right> <bottom>"
                  Add whitespace around page. Usefule when cropping to maintain
                  some white space. Outside of cropping executes an inverse trim.
                  The following measurement are supported: mm, pc, cm, in, pt & bp.
                  Defaults to TeX points (1 pt = 1/72.12 inch)
     --outfile PATH  (or -o PATH)
                  Specifies where the output file(s) will go.  If PATH is an
                  existing directory, perljam will write its output PDF
                  file(s) there.
     --suffix STRING
                  Specifies a suffix for output file names, to be used when
                  --outfile is either (a) a directory, or
                                      (b) not specified in a --batch call.
                  A good STRING should be descriptive: for example,
                           --suffix rotated
                  would append the text -rotated to the name of the input
                  file in order to make the output file name, as in
                  myfile-rotated.pdf.  The STRING must not have zero length.
                  [Defaults to: suffix=$opt{suffix}]
     --checkfiles
     --no-checkfiles
                  Check the output pdf file using unix's file command
                  [Defaults to: checkfiles=$opt{checkfiles}]
     --preamble STRING
                  Append the supplied STRING to the preamble of the LaTeX
                  source file(s), immediately before the \\begin{document}
                  line.  An example:
                      perljam --nup 2x2 myfile.pdf -o myfile-4up.pdf \\
                          --preamble '\\usepackage{fancyhdr} \\pagestyle{fancy}'
                  The --preamble option can be used, for example, to load
                  LaTeX packages and/or to set global options.  If --preamble
                  is used more than once in the call, the supplied preamble
                  strings are simply concatenated.
     --keepinfo
     --no-keepinfo
                  Preserve (or not) Title, Author, Subject and Keywords in the
                  output PDF file.  This requires the pdfinfo utility, from
                  poppler or xpdf, and the LaTeX hyperref package.
                  [Defaults to: keepinfo=$opt{keepinfo}]
     --pdftitle STRING
     --pdfauthor STRING
     --pdfsubject STRING
     --pdfkeywords STRING
                  Provide text for the  Title, Author, Subject and Keywords
                  in the output PDF file.  Requires the  LaTeX hyperref
                  package.  These options, individually, over-ride --keepinfo.
     --landscape
     --no-landscape
                  Specify landscape page orientation (or not) in the
                  output PDF file.
                  [Defaults to: landscape=$opt{keepinfo}]
     --twoside
     --no-twoside
                  Specify (or not) the twoside document class option.
                  [Defaults to: twoside=$opt{keepinfo}]
     --paper PAPERSPEC  (or simply --PAPERSPEC)
                  Specify a LaTeX paper size, for example --paper a4paper or
                  simply --a4paper for A4 paper. If the LaTeX geometry package
                  is installed, a wider range of paper sizes is available.
                  [Defaults to: paper=$opt{paper}]
     --papersize 'WIDTH HEIGHT'
                  Specify a custom paper size, e.g.,
                      --papersize '10in 18cm'
     --pagecolor RGBSPEC
                  Specify a background colour for the output pages.  The
                  RGBSPEC must be a comma-separated trio of integers
                  between 0 and 255.  An example:
                         --pagecolor 150,200,150
                  [Default is no background colour]
     --tidy
     --no-tidy
                  Specify whether the temporary directory created by
                  perljam should be deleted.  Use --no-tidy to help debug
                  most errors.
                  [Defaults to: tidy=$opt{tidy}]
     --vanilla
                  Suppress the reading of any site-wide or user-specific
                  configuration files.
     --KEY VALUE
                  Specify options to \\includepdfmerge, in the LaTeX
                  pdfpages package.  Here KEY is the name of any of the
                  many options for \\includepdfmerge, and VALUE is a
                  corresponding value.  Examples are
                      --nup 2x1     (for 2-up side-by-side imposition)
                      --scale 0.7   (to scale all input pages to 70% size)
                      --offset 1cm 0.5cm
                                    (to offset all pages -- note the quotes!)
                      --frame true  (to put a frame round each input page)
                      --trim 1cm 2cm 1cm 2cm --clip true
                                    (to trim those amounts from left, bottom,
                                     right and top, respectively, of input
                                     pages)
                  Where an option ends in '*' it can be replaced by '2'.

                  For more information see the manual for
                  the pdfpages package, at
                  http://www.ctan.org/tex-archive/macros/latex/contrib/pdfpages

Unlike pdfjam, perljam has no default paths for configuration files. but if
you wish to use one you can set the PERLJAMCONFIGFILE environmental variable.
Multiple files can be specified using a semi-colon on windows or a colon on
other systems. Such as

export PERLJAMCONFIGFILE='~/.perljam.conf:/etc/share/perljam.conf'

Anything that can be passed on the command line can be put in a configuration file.
For Example:

paper legal
no-tidy
pdfauthor Yours Truly
MANPAGE
;


}

# get a unique filename for output - loops until it finds one
sub get_unique_filename {
	my ($prefix, $suffix) = @_;
	my $o;
	my $i = 0;
	my $h = '.';

	do {
		$o = "$prefix$h$suffix";
		$i++;
		$h = ".$i.";
	} while -f $o;
	return $o;
}

sub parse_param_index {
	# parse param types from array
	my %param_guide;
	while(my $k = shift @_) {
		my $h = {};
		if($k =~ s/\!$//) {
			$h->{type} = 'boolean';
		} elsif($k =~ s/\!([a-z0-9]+)$//) {
			$h->{type} = 'boolean';
			$h->{invert} = $1;
		} elsif($k =~ s/\=v\:(.+)$//) {
			$h->{type} = 'value';
			$h->{assoc} = $1;
		} elsif($k =~ s/\.$//) {
			$h->{type} = 'concat';
		} else {
			$h->{type} = 'string';
		}

		my @names = split (/\|/, $k);
		$h->{name} = $names[0];

		foreach my $pk (@names) {
			$param_guide{$pk} = $h;
		}
	}

	return \%param_guide;
}

sub process_args_from_cmd_line {
	my $param_guide = shift;

	# process command line args
	my %params_from_cmd;
	my @remainder;
	my $awaiting_value;
	while (my $arg = shift @ARGV) {
		if($arg eq '--') {
			last;
		} elsif($arg =~ m/^--(.+)$/ || $arg =~ /^-([a-zA-Z])$/) {
			$awaiting_value = undef; # reset

			my $key = lc $1;
			my $value;

			my $ref = $key;
			my $boolean_value = $ref =~ s/^no-// ? 0 : 1;

			if(defined $param_guide->{$ref}) {
				$key = $param_guide->{$ref}{name};

				if($param_guide->{$ref}{type} eq 'value') {
					# transform --a4paper to --paper a4
					$key = $param_guide->{$ref}{assoc};
					$value = $param_guide->{$ref}{name};
				} elsif($param_guide->{$ref}{type} eq 'boolean') {
					$value = $boolean_value;

					# grab next value (if any)
					if(my $next = shift @ARGV) {
						if($next =~ /^(false|0)$/) {
							$value = $value ? 0 : 1;
						} elsif($next =~ /^(true|1)$/) {
							# nothing to do here, are true by default
						} else {
							unshift @ARGV, $next;
						}
					}

					# deal with inversions eg (quiet to verbose)
					if(defined $param_guide->{$ref}{invert}) {
						$key = $param_guide->{$ref}{invert};
						$value = $value ? 0 : 1;
					}
				}
			}

			if(!defined $value) {
				$awaiting_value = $key;
			}

			$params_from_cmd{$key} = $value;
		} elsif (defined $awaiting_value) {
			if(defined $param_guide->{$awaiting_value} && $param_guide->{$awaiting_value}{type} eq 'concat' && defined $params_from_cmd{$awaiting_value}) {
				$params_from_cmd{$awaiting_value} .= "\n" . $arg;
			} else {
				$params_from_cmd{$awaiting_value} = $arg;
			}
			$awaiting_value = undef;
		} else {
			push @remainder, $arg;
		}
	}

	# unshift unused back onto ARGV
	unshift @ARGV, @remainder;

	return \%params_from_cmd;
}

sub process_args_from_file {
	my $param_guide = shift;
	my @configfiles = @_;

	# now process configuration file
	my %params_from_file = ();
	while(my $configfile = shift @configfiles) {
		open my $CONFIG, '<', $configfile;
		while(my $line = <$CONFIG>) {
			$line =~ s/[\x0D\x0A]+$//; # chomp
			$line =~ s|#.*$||; # remove comments
			$line =~ s|^\s*(.+?)\s*$|$1|; # trim whitespace
			next if $line eq '';

			$line =~ m/^([a-zA-Z0-9\-]+)(.*$|$)/ || next;

			my $key = lc $1;
			my $ref = $key;

			my $value = $2;
			$value =~ s/^ *[=:]//;
			$value =~ s|^\s*||;
			$value =~ s/^(['"])(.*)\g1$/$2/g; # strip quotes

			my $boolean_value = ($ref =~ s/^no-// ? 0 : 1);

			if(defined $param_guide->{$ref}) {
				$key = $param_guide->{$ref}{name};
				if($param_guide->{$ref}{type} eq 'value') {
					$key = $param_guide->{$ref}{assoc};
					$value = $param_guide->{$ref}{name};
				} elsif($param_guide->{$ref}{type} eq 'boolean') {
					if($value =~ /^(false|0)$/) {
						$value = $boolean_value ? 0 : 1;
					}

					# deal with inversions eg (quiet to verbose)
					if(defined $param_guide->{$ref}{invert}) {
						$key = $param_guide->{$ref}{invert};
						$value = $value ? 0 : 1;
					}
				} elsif($param_guide->{$ref}{type} eq 'concat' && defined $params_from_file{$key}) {
					$params_from_file{$key} .= "\n" . $value;
					next;
				}
			}

			$params_from_file{$key} = $value;
		}
		close $CONFIG;
	}

	return \%params_from_file;
}

sub includepdf {
	my $fileobj = shift;
	my @keys = @_;

	my @file_options;
	foreach my $k (@keys) {
		if(defined $fileobj->{$k}) {
			if(length $fileobj->{$k} > 0) {
				push @file_options, $k . '={' . $fileobj->{$k} . '}';
			} else {
				push @file_options, $k;
			}
		}
	}
	return "\\includepdf[" . join(',', @global_options, @file_options) . ']{' . $fileobj->{texname} . "}\n";
}


sub callpdflatex {
	# this subroutine relies on the current working directory being correctly set
	print "Calling pdflatex...\n"  if $opt{verbose};

	open3(0, my $CMD, 0, $opt{pdflatex}, 'a.tex');

	if($opt{verbose}) {
		print <$CMD>;
	} else {
		open my $MSG, '>a.msg';
		binmode $MSG;
		print $MSG (<$CMD>);
		close $MSG;
	}

	if(close $CMD && -f 'a.pdf') {
		print "done\n" if $opt{verbose};
	} else {
		my $cwd = getcwd();
		die "Pdflatex failed in $cwd\n";
	}
}

sub move_output {
	my $o = shift;

	# checkfiles
	if($opt{checkfiles}) {
		my $output;
		# run file command on output
		open3(0, my $CMD, 0, $opt{file}, '-b', 'a.pdf');
		$output = <$CMD>;
		close $CMD;
		$output =~ s/[\x0D\x0A]+$//; # chomp

		if($output !~ m/^PDF document/) {
			die "Output not verified as a PDF document: '" . getcwd() . "/a.pdf'!\n";
		}
	}

	if(move('a.pdf', $o)) {
		print "Created output file: $o\n" if $opt{verbose};
	} else {
		die "Cannot copy '" . getcwd() . "/a.pdf' to '$o'!\n";
	}
}

sub check_path {
	my $exec = shift;

	my $path = File::Which::which($exec); # scalar context

	return 0 if !$path;

	return $exec;
}

sub do_crop {
	my $file = shift;

	# parse selector
	my $selector = $file->{pages};
	$selector =~ s/last/inf/;
	$selector =~ s/(^|,)-/${1}1-/g;
	$selector =~ s/-(,|$)/-inf$1/g;
	$selector =~ s/(^|,)\{\}/$1/g;

	# get first and last pages
	my ($first, $last) = ('inf', 0);
	my @parts = split /[-,]/, $selector;

	foreach my $p (@parts) {
		if($p =~ /^([0-9]+|inf)$/ && $p > 0) {
			if($p < $first) { $first = $p; }
			if($p > $last) { $last = $p; }
		} else {
			die "\nBad selector: $file->{pages}\n";
		}
	}

	# prepare ghostscript command
	my @gs_cmdpipe = ($opt{ghostscript}, '-sDEVICE=bbox', '-dBATCH', '-dNOPAUSE');
	if($first > 1) {
		push @gs_cmdpipe, '-dFirstPage=' . $first;
	}
	if($last ne 'inf') {
		push @gs_cmdpipe, '-dLastPage='. $last;
	}
	push @gs_cmdpipe, '-c', 'save', 'pop', '-f', $file->{source};

	# run ghostscript
	my $CMD;
	open3(0, $CMD, $CMD, @gs_cmdpipe) or die "Cannot call ghostscript!\n";

	print "Running ghostscript for crop..." if $opt{verbose};

	my @bb;
	$bb[ $first - 1 ] = (); # dummy to align index with logical page numbers
	while (my $line = <$CMD>) {
		if($line =~ /^%%HiResBoundingBox: *(-?[0-9\.]+) (-?[0-9\.]+) (-?[0-9\.]+) (-?[0-9\.]+)/) { # ignore CRs
			print $line if $opt{verbose};
			push @bb, [$1, $2, $3, $4];
		}
	}
	close $CMD;

	if($#bb == $first - 1) {
		die "\nCrop failed to process any pages\n";
	}

	# last page
	if($last eq 'inf' && !defined $file->{pagecount}) {
		$file->{pagecount} = $#bb;
	}

	# further selector parsing
	$selector =~ s/inf/$file->{pagecount}/;

	my %usedpages = ();
	foreach my $s (split /,/, $selector) {
		if($s =~ m/^[0-9]+$/) {
			$usedpages{$s} = 1;
		} elsif($s =~ m/^([0-9]+)-([0-9]+)$/) {
			if($1 < $2) {
				@usedpages{$1...$2} = ();
			} elsif($1 == $2) {
				$usedpages{$1} = 1;
			} else {
				@usedpages{$2...$1} = ();
			}
		} else {
			die "\nBad selector: $file->{pages}\n";
		}
	}
	my @usedpages = sort { $a <=> $b } keys %usedpages;

	if($usedpages[$#usedpages] > $#bb) {
		die "\nSelector exceeds page count\n";
	}

	#Calculate output dimensions
	my ($left, $top, $right, $bottom) = @{ $bb[shift @usedpages ] };
	foreach my $i (@usedpages) {
		if ($bb[$i][0] < $left)   { $left   = $bb[$i][0] }
		if ($bb[$i][1] < $top)    { $top    = $bb[$i][1] }
		if ($bb[$i][2] > $right)  { $right  = $bb[$i][2] }
		if ($bb[$i][3] > $bottom) { $bottom = $bb[$i][3] }
	}

	# adjust for margins
	$left   -= $margins[0];
	$top    -= $margins[1];
	$right  += $margins[2];
	$bottom += $margins[3];

	# pdfTex can't deal with decimal places
	$left   = int($left + 0.5);
	$top    = int($top + 0.5);
	$right  = int($right + 0.5);
	$bottom = int($bottom + 0.5);

	print "done\nOutput dimentions: ${left}bp ${top}bp ${right}bp ${bottom}bp\n" if $opt{verbose};

	return "${left}bp ${top}bp ${right}bp ${bottom}bp";
}

# Strip off the file path and name extension
# Look for the long name on Win32
sub get_pdf_basename {
	my $f = shift;

	if($^O eq 'MSWin32') {
		$f = Win32::GetLongPathName($f);
		$f =~ s|\\|/|g;
	}

	$f =~ s|^.*/||;
	$f =~ s/\.pdf$//i;

	return $f;
}
sub safe_abs_path {
	my $p = shift;
	my $x = $p =~ s|[/\\]$||s; # remove trailing slashes

	if($^O eq 'MSWin32') {
		# on windows Cwd::safe_abs_path fails on non-existent files
		$p = Win32::GetFullPathName($p);
		$p =~ s|\\|/|g;
	} else {
		$p = abs_path($p);
	}

	if($x) {
		$p .= '/';
	}

	return $p;
}


sub compile_pdf_info {
	my $opt = shift;
	my $file = shift;

	my @pdfinfo = ();
	if($texpackages{'hyperref.sty'}) {
		foreach my $p (qw|title author subject keywords|) {
			if(defined $opt->{$p}) {
				push @pdfinfo, 'pdf' . $p . '={' . $opt->{$p} . '}';
			} elsif(defined $file->{$p}) {
				push @pdfinfo, 'pdf' . $p . '={' . $file->{$p} . '}';
			}
		}
	}

	my $ret = '';
	if($#pdfinfo > -1) {
		$ret .= "\\usepackage{hyperref}\n";
		$ret .= '\\hypersetup{';
		$ret .= join ',', @pdfinfo;
		$ret .= "}\n";
	}
	return $ret;
}

